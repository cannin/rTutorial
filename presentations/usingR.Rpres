Introduction to R
===
author: Augustin Luna
date: `r format(Sys.time(), '%d %B, %Y')`
width: 960
height: 700
transition: linear
css: rpres.css

<!-- NOTE: Styling and external images may be missing --> 

<p>Research Fellow
  <br/>
  Department of Biostatistics and Computational Biology
  <br/>
  Dana-Farber Cancer Institute
</p>
<div class="footer" style="display:none;"><img src="img/dfci_logo.gif" height="60px" width="330px" /></div>

Topics to be Covered
===
* R Language Basics
* Vectors and Selections
* Matrices and Data Frames
* Writing and Reading Data
* Plotting

***

* Control Flows
 * for Loops 
 * if Statements 
* Using Packages
 * Installing 
 * Loading
 * Viewing Help
* Additional Common Functions 

Basics
===
* From: https://github.com/Data-Camp/introduction_to_R/blob/master/chapter1.Rmd

## Simple calculations 
```{r}
2 + 2
```

Commenting Code
===
class: smaller-50

```{r}
# This is a comment 
2 + 2 

# Addition
5 + 5 

# Subtraction
5 - 5 

# Multiplication
3 * 5

# Division
(5 + 5) / 2 
```

Variable Assignments 
===
```{r}
my_variable <- 4
my_variable
```

Basic Data Types
===
```{r}
# What is the answer to the universe?
my_numeric <- 42

# The quotation marks indicate that the variable is of type character
my_character <- "some text"

# Change the value of my_logical
my_logical <- TRUE
```

Help 
===
```{r}
?mean
```

Vectors 
===
class: smaller-50

* From: https://github.com/Data-Camp/introduction_to_R/blob/master/chapter2.Rmd

## Creating a vector
```{r}
numeric_vector <- c(1, 2, 3)
character_vector <- c("a", "b", "c")
boolean_vector <- c(TRUE, FALSE, FALSE)
```

## Selection by index 
```{r}
numeric_vector[c(1, 3)]
```

## Selection by logical
```{r}
my_variable <- 2
result <- numeric_vector[numeric_vector > my_variable]
result
```

Matrices 
===
* From: https://github.com/Data-Camp/introduction_to_R/blob/master/chapter3.Rmd

### Matrices from vectors
```{r}
first_row <- c(6,8,7,9,9,10)
second_row <- c(6,8,7,5,9,6)
third_row <- c(5,4,6,6,7,8)
fourth_row <- c(4,5,3,4,6,8)

# Combine multiple vectors to form a matrix
theater <- rbind(first_row, second_row, third_row, fourth_row)
row_scores <- rowSums(theater)
scores <- cbind(theater, row_scores)
```

Naming a Matrix 
===
class: smaller 

```{r}
rownames(scores) <- c("row1", "row2", "row3", "row4")
colnames(scores) <- c("col1", "col2", "col3","col4", "col5", "col6", "total")
scores
```

Size of Matrix 
===
```{r}
ncol(scores)
nrow(scores)
dim(scores)
```

Selecting Elements 
===
class: smaller 

### Select rows and columns
```{r}
i <- 1 
j <- 1 

scores[i,]
scores[,j]
scores[i,j]
```

Data Frames 
===
class: smaller-75

```{r}
data(iris)

# See the first 6 rows of a data.frame
head(iris)

# See the last 6 rows of a data.frame
tail(iris)
```

Rename data.frame Columns 
===
class: smaller 

```{r}
numeric_vector <- c(1, 2, 3)
character_vector <- c("a", "b", "c")
boolean_vector <- c(TRUE, FALSE, FALSE)

df <- data.frame(numbers=numeric_vector, characters=character_vector, boolean=boolean_vector)

df
```

Selecting Columns by Name
===
class: smaller-50

```{r}
iris[,"Sepal.Length"]
```

```{r}
iris$Sepal.Length
```

Exporting Data 
===
### Writing files 
```{r}
write.table(iris, file="iris.txt", sep="\t", row.names=TRUE, col.names=TRUE, quote=FALSE)
```

### Reading files 
```{r}
df <- read.table("iris.txt", sep="\t", header=TRUE)
```

Plotting 
===
* From: https://github.com/Data-Camp/introduction_to_R/blob/master/chapter7.Rmd

Histogram
===
```{r, fig.align="center", fig.height=4, fig.width=4, dpi=150, out.height="600px"}
hist(iris$Sepal.Length)
```

Scatterplot 
===
class: smaller-50

```{r, fig.align="center", fig.height=4, fig.width=4, dpi=150, out.height="600px"}
plot(x=iris$Sepal.Length, 
     y=iris$Sepal.Width,
     main = "Sepal Length versus Sepal Width",
     xlab = "Sepal Length",
     ylab = "Sepal Width",
     col = "red")
```

for Loops
===
```{r}
hellos <- c("Hello World!", 
            "Hola Mundo", 
            "Ola Mundo!")

for(hello in hellos) {
  cat(hello, "\n")
}
```

if Statements
===
class: smaller-65

```{r}
a <- 5 

# Greater than or equal to
if(a >= 5) {
  cat("Greater than or equal to")
} else {
  cat("Not greater than or equal to")
}

# Equivalent 
if(a == 5) {
  cat("Equal")
}

# Not equivalent
if(a != "Hello World!") {
  cat("Not equal")
}
```

R Packages 
===
* From: http://www.jkarreth.net/files/RPOS517_Day1_IntroR.pdf 

Install packages from repositories 
===

* NOTE: These commands are commented out since these packages are already installed
```{r, eval=FALSE}
# From CRAN (for general packages)
install.packages("httr")

# From Bioconductor (for biology-related packages)
source("https://bioconductor.org/biocLite.R")
biocLite("rcellminer")
```

Load Package 
===
```{r, eval=FALSE}
library(rcellminer)

# Check if package was loaded
sessionInfo()
```

Package Help
===
```{r, eval=FALSE}
help(package="rcellminer")
```

length Function
===

```{r}
# Find the length of a vector 
my_variable <- runif(100)
length(my_variable)
```

min, max, summary Functions
===
class: smaller 

```{r}
# Find the minimum
min(my_variable)

# Find the maximum
max(my_variable)

# Output a summary statistics of vector
summary(my_variable)
```

cat, paste Functions
===
class: smaller 

```{r}
hello <- c("hello", "hola", "ola")
world <- c("world", "mundo")

# Make a new string from multiple variable and separated by "sep"
helloWorld <- paste(hello[1], world[2], sep=" ")
cat(helloWorld)
```

names Function
===
```{r}
indicies <- 1:10
 
randNum <- runif(max(indicies))
vectorNames <- letters[indicies]

# Name the randNum vector according to vectorNames
names(randNum) <- vectorNames
```

list Function 
===
class: smaller-70

```{r}
# Make a list variable; each list element has a different length
my_list <- list(a=1:5, b=1:10, c=1:100)

names(my_list)
my_list$a

my_list[[1]]
my_list[["a"]]

length(my_list)
```

is.na, which Function and not Operator
===
class: smaller-75

```{r}
my_vector <- c(1, 2, NA, 4, 5, 6, 7, 8, NA, 10)

# Is each element in my_vector an NA
is.na(my_vector)

# Which indicies in my_vector are NA
which(is.na(my_vector))

# Which indicies in my_vector are not NA
which(!is.na(my_vector))
```

is.null Function 
===
class: smaller-60

```{r}
# NULL variables have undefined values
my_vector <- NULL
my_vector
is.null(my_vector)

my_vector <- c(my_vector, 5)
my_vector <- c(my_vector, 6)
my_vector
is.null(my_vector)
is.vector(my_vector)
```

is.nan Function
===
```{r}
my_variable <- NaN

is.nan(my_variable)
```

unique Function
===
```{r}
my_vector <- c(1, 1, 2, 3, 3, 4, 4, 5)

# Find the unique values in a vector
unique(my_vector)
```

sort Function
===
```{r}
my_vector <- c(1, 4, 3, 6, 7, 10, 9, 5, 2, 8)

# Sort values in vector
sort(my_vector)
sort(my_vector, decreasing=TRUE)
```

%in% Function
===
class: smaller-70

```{r}
restaurant_foods <- c("mango", "chicken", "pork", "chips",
                      "cookies", "cake", "muffins", "cupcakes") 

favorite_foods <- c("mango", "orange", "cake", "chicken")

# Does the restaurant have my favorite foods?
restaurant_foods %in% favorite_foods

# What are the indicies of my favorite foods
which(restaurant_foods %in% favorite_foods)

# Return my favorite foods
restaurant_foods[which(restaurant_foods %in% favorite_foods)]
```

Getting Help
===
* Stack Overflow
 * http://stackoverflow.com/
* Cross-Validated Stats Exchange
 * Part of Stack Overflow
 * http://stats.stackexchange.com/
* Biostars
 * https://www.biostars.org
